USE [USSDAPPS]
GO
/***** Object:  StoredProcedure [dbo].[SP_SHUFFLE]    Script Date: 12/12/2017 12:16:01 PM *****/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[SP_SHUFFLE] @WINNER_MSISDN nvarchar(12)
AS
-- =====================================================
-- Author:  <Author,Lambert KAMARO>
-- Create date: <Create Date, 12 Feb 2016>
-- Description: <Description, Shuffle Valentine PLAYERS>
-- =====================================================

-- CHECK IF IT'S THE RUNNING DURING THE ALLOWED TIME 7:00AM - 22:00 PM 
IF(DATEPART(HOUR,GETDATE()) BETWEEN 07 AND 22)

BEGIN 
 -- VARIABLES SECTION --
 -- RANDOMIZE VARIABLES
  DECLARE @TOTAL_OPENING_STOCK AS NUMERIC;
  DECLARE @MAX_FREQUENCE_IN_MILLSECONDS AS NUMERIC;
  DECLARE @TIME_TO_ISSUE_IN_MILLSECONDS AS NUMERIC;
  DECLARE @TIME_DIF_BETWEEN_TRANSACTION_IN_SEC AS NUMERIC;
  DECLARE @LAST_LATEST_ISSUED_DATETIME AS DATETIME;

 -- PRIZES AND WINNER BASED VARIABLES
  DECLARE @PROFILE_RATE VARCHAR(10);

 -- 1. GETTING OPEN STOCK GENERAL INFORMATION
 SELECT 
   @LAST_LATEST_ISSUED_DATETIME = MAX(UPDATED_AT),
   @TOTAL_OPENING_STOCK = SUM(CAST(OPEN_STOCK AS NUMERIC)),
   @MAX_FREQUENCE_IN_MILLSECONDS  = MAX(CAST(FREQUENCY_OF_HOURS AS NUMERIC)) * 3600000
   FROM Valentine_prizes WITH(NOLOCK);
    
  -- IF WE ARE ON THE NEXT DAY, RESET STOCK
  IF(CONVERT(VARCHAR(8),@LAST_LATEST_ISSUED_DATETIME,112) <> CONVERT(VARCHAR(8),GETDATE(),112))
  BEGIN
   UPDATE Valentine_prizes SET ISSUED_STOCK = 0, UPDATED_AT = GETDATE();
  END

 -- 2. GETTING DIFFERENCE BETWEEN TRANSACTION IN MILLISECONDS
 IF OBJECT_ID('tempdb..#LAST_60_TRANSACTIONS') IS NOT NULL DROP TABLE #LAST_60_TRANSACTIONS;
 SELECT TOP 60 MSISDNA, CREATED_AT,
     DATEDIFF(SECOND,lag(CREATED_AT) over (order by CREATED_AT),CREATED_AT) as MILLISECDIFF
     INTO #LAST_60_TRANSACTIONS
 FROM Valentine_transactions WITH(NOLOCK) 
   WHERE status ='success' AND 
   CONVERT(VARCHAR(8),CREATED_AT,112) = CONVERT(VARCHAR(8),GETDATE(),112)
   GROUP BY MSISDNA, CREATED_AT
   ORDER BY CREATED_AT DESC;

 -- 3. GETTING AVERAGE MILLISECONDS IT TAKES TO GET A NEW TRANSACTION
 SELECT @TIME_DIF_BETWEEN_TRANSACTION_IN_SEC = AVG(MILLISECDIFF) FROM #LAST_60_TRANSACTIONS;


 -- 4. CALCULATING THE GENERAL TIME TO ISSUE 
 IF(@TIME_DIF_BETWEEN_TRANSACTION_IN_SEC = 0 ) 
 BEGIN 
  SET @TIME_DIF_BETWEEN_TRANSACTION_IN_SEC = 1; 
 END

 SET @TIME_TO_ISSUE_IN_MILLSECONDS = (@MAX_FREQUENCE_IN_MILLSECONDS /  @TOTAL_OPENING_STOCK );-- * ( @TIME_DIF_BETWEEN_TRANSACTION_IN_SEC);

 -- 5. CALCULATING THE TIME TO ISSUE PRICE BASED ON HOW PEOPLE ARE DOING TRANSACTIONS
 SET @TIME_TO_ISSUE_IN_MILLSECONDS = @TIME_TO_ISSUE_IN_MILLSECONDS ;

 -- 6. ONLY START ISSUE THE PRIZE IF IT'S THE TIME FOR ISSUING THE PRICE.
 IF(DATEDIFF(MILLISECOND,@LAST_LATEST_ISSUED_DATETIME,GETDATE()) > @TIME_TO_ISSUE_IN_MILLSECONDS)
 BEGIN
 
   -- 7. DETERMINE MSISDN PROFILE RATE BEFORE LOOKING FOR THE PRIZE
   SELECT @PROFILE_RATE = PROFILE_RATE FROM [Valentine_customer_profile] WHERE MSISDN = @WINNER_MSISDN
   AND (CONVERT(VARCHAR(8),UPDATED_AT,112) < CONVERT(VARCHAR(8),GETDATE(),112));         -- MAKE SURE NONE GET PRICE 2 TIMES A DAY

   -- 8. ONLY CONTINUE IF THE CUSTOMER HAS PROFILE 
   IF(@PROFILE_RATE IS NOT NULL)
   BEGIN
     -- 9. GET AVAILABLE PRIZES
     IF OBJECT_ID('tempdb..#PRIZES') IS NOT NULL DROP TABLE #PRIZES
     SELECT CAST((100  (1.00  CAST(ISSUED_STOCK AS int) /CAST(OPEN_STOCK AS INT))) AS int) AS PERCENTAGE,* 
       INTO #PRIZES 
       FROM [Valentine_prizes] WITH(NOLOCK) 
       WHERE PROFILE_RATE <= @PROFILE_RATE                 -- ONLY FOR THE CURRENT MSISDN PROFILE RATE
       AND CAST(ISSUED_STOCK AS int) < CAST(OPEN_STOCK AS INT)            -- ONLY FOR THE CURRENT MSISDN PROFILE RATE        

       IF((SELECT COUNT(1) FROM #PRIZES) > 0 )
       BEGIN
     -- 10. DETERMINE WHICH HIGHEST PRIZE IS AVAILABLE
     IF OBJECT_ID('tempdb..#AVAILABLE_PRICE') IS NOT NULL DROP TABLE #AVAILABLE_PRICE;
     SELECT TOP 1 * INTO #AVAILABLE_PRICE FROM #PRIZES ORDER BY PROFILE_RATE DESC;        -- ONLY PICK THE MOST AVAILABLE PRIZES

     -- 11. CHECK IF WE HAVE AVAILABLE PRICE AND
     IF ((SELECT PROFILE_RATE FROM #AVAILABLE_PRICE ) > 0)
     BEGIN
      -- 12. PREPARE FINAL WINNER AND PRIZE INFORMATION
          IF OBJECT_ID('tempdb..#FINAL_TABLE') IS NOT NULL DROP TABLE #FINAL_TABLE;
         SELECT 
           [ID] ,
           [PRIZE_NAME] ,
           [IS_PROVISIONABLE],
           [WALLET_NAME],
           [WALLET_VALUE],
           [WALLET_EXPIRATION],
           [WALLET_MTR],
           [NOTIFICATION_MESSAGE],
           [WINNER_MSISDN] = @WINNER_MSISDN,
           PROFILE_RATE = @PROFILE_RATE
         INTO #FINAL_TABLE
         FROM #AVAILABLE_PRICE;

         -- 13. UPDATE INCREASE THE ISSUED OUT PRICES
         UPDATE [Valentine_prizes] SET UPDATED_AT = GETDATE(),ISSUED_STOCK = CAST(ISSUED_STOCK AS INT) + 1 WHERE PROFILE_RATE = @PROFILE_RATE;
         UPDATE [Valentine_customer_profile] SET UPDATED_AT = GETDATE() WHERE MSISDN = @WINNER_MSISDN;

         -- 14. RETURN RESULTS
         SELECT * FROM #FINAL_TABLE;
       END
     END 
   END
 END
END